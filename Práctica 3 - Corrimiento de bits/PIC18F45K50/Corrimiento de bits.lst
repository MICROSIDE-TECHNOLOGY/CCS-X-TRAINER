CCS PCH C Compiler, Version 5.105Pd, 1               27-sep.-21 11:45
Compiler operating in Evaluation Mode
To obtain a fully enabled compiler visit www.ccsinfo.com/products

               Filename:   C:\Users\grego\OneDrive\Desktop\CSS_Practicas_OK\Práctica 3 - Corrimiento de bits\Proyecto\PIC18F45K50\Corrimiento de bits.lst

               ROM used:   136 bytes (0%)
                           Largest free fragment is 24436
               RAM used:   6 (0%) at main() level
                           7 (0%) worst case
               Stack used: 0 locations
               Stack size: 31

*
2000:  GOTO   2032
.................... /************************************************************************************************
.................... Company:
.................... Microside Technology Inc.
.................... 
.................... File Name:
.................... Corrimiento de bits.c
.................... 
.................... Product Revision  :  1
.................... Device            :  X-TRAINER
.................... Driver Version    :  1.0
.................... ************************************************************************************************/
.................... 
.................... /*
.................... ---------------------------------------------------------------------------
.................... Implementar corrimiento de 8 bits y desplegar el resultado en 8 LEDs
.................... ---------------------------------------------------------------------------
.................... */
.................... 
.................... #include <18F45K50.h>                            //Incluye el microcontrolador con el que se va a trabajar 
.................... //////////// Standard Header file for the PIC18F45K50 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F45K50
.................... 
.................... #list
.................... 
.................... #use delay(internal=48MHz)                       //Tipo de oscilador y frecuencia dependiendo del microcontrolador 
*
2008:  CLRF   FEA
200A:  MOVLW  06
200C:  MOVWF  FE9
200E:  MOVF   FEF,W
2010:  BZ    202E
2012:  MOVLW  0F
2014:  MOVWF  01
2016:  CLRF   00
2018:  DECFSZ 00,F
201A:  BRA    2018
201C:  DECFSZ 01,F
201E:  BRA    2016
2020:  MOVLW  8F
2022:  MOVWF  00
2024:  DECFSZ 00,F
2026:  BRA    2024
2028:  NOP   
202A:  DECFSZ FEF,F
202C:  BRA    2012
202E:  GOTO   207C (RETURN)
.................... #build(reset=0x02000,interrupt=0x02008)          //Asigna los vectores de reset e interrupción para la versión con bootloader
.................... #org 0x0000,0x1FFF {}                            //Reserva espacio en memoria para el bootloader
.................... 
.................... byte MI_REGISTRO;                                //Variable de 8 bits(1 byte)
.................... 
.................... void main (void)
2032:  CLRF   FF8
2034:  BCF    FD0.7
2036:  MOVLW  70
2038:  MOVWF  FD3
203A:  CLRF   FD2
203C:  CLRF   F9B
203E:  MOVLB  F
2040:  CLRF   x5B
2042:  CLRF   x5C
2044:  CLRF   x5D
2046:  CLRF   x5E
2048:  CLRF   x5F
204A:  CLRF   F9A
204C:  CLRF   F99
204E:  CLRF   F98
.................... 
.................... {
....................    set_tris_b (0x00);                          //Configura puerto B como salidas
2050:  MOVLW  00
2052:  MOVWF  F93
....................    MI_REGISTRO = 0x0D;                         //Se inicia cargando los bits deseados
2054:  MOVLW  0D
2056:  MOVWF  04
.................... 
....................    while (true)
.................... 
....................        {
....................             MI_REGISTRO = ((MI_REGISTRO <<1)|(MI_REGISTRO>>7));     //Inicia corrimiento
2058:  BCF    FD8.0
205A:  RLCF   04,W
205C:  MOVWF  05
205E:  CLRF   00
2060:  BTFSC  04.7
2062:  BSF    00.0
2064:  MOVF   00,W
2066:  IORWF  05,W
2068:  MOVWF  04
....................             output_b (MI_REGISTRO);                                 //Pasa el valor al puerto B
206A:  CLRF   F93
206C:  MOVFF  04,F8A
....................             delay_ms (500);
2070:  MOVLW  02
2072:  MOVWF  05
2074:  MOVLW  FA
2076:  MOVWF  06
2078:  MOVLB  0
207A:  BRA    2008
207C:  DECFSZ 05,F
207E:  BRA    2082
2080:  BRA    2086
2082:  MOVLB  F
2084:  BRA    2074
2086:  MOVLB  F
2088:  BRA    2058
....................         } 
.................... }
208A:  SLEEP 

Configuration Fuses:
   Word  1: C823   PLL3X PLLEN NOCPUDIV LS48MHZ INTRC_IO PRIMARY_SW FCMEN IESO
   Word  2: 3C5E   PUT BROWNOUT BORV19 NOLPBOR NOWDT WDT32768
   Word  3: D300   CCP2C1 PBADEN T3CKC0 SDOB3 MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
