CCS PCH C Compiler, Version 5.105Pd, 1               27-sep.-21 13:55
Compiler operating in Evaluation Mode
To obtain a fully enabled compiler visit www.ccsinfo.com/products

               Filename:   C:\Users\grego\OneDrive\Desktop\CSS_Practicas_OK\Práctica 15 - Servomotor\Proyecto\PIC18F4550\Servomotor.lst

               ROM used:   432 bytes (1%)
                           Largest free fragment is 24140
               RAM used:   30 (1%) at main() level
                           31 (2%) worst case
               Stack used: 1 locations (0 in main + 1 for interrupts)
               Stack size: 31

*
2000:  GOTO   210C
*
2008:  MOVWF  04
200A:  MOVFF  FD8,05
200E:  MOVFF  FE0,06
2012:  MOVLB  0
2014:  MOVFF  FE9,0C
2018:  MOVFF  FEA,07
201C:  MOVFF  FE1,08
2020:  MOVFF  FE2,09
2024:  MOVFF  FD9,0A
2028:  MOVFF  FDA,0B
202C:  MOVFF  FF3,12
2030:  MOVFF  FF4,13
2034:  MOVFF  FFA,14
2038:  MOVFF  FF5,15
203C:  MOVFF  FF6,16
2040:  MOVFF  FF7,17
2044:  MOVFF  00,0E
2048:  MOVFF  01,0F
204C:  MOVFF  02,10
2050:  MOVFF  03,11
2054:  BTFSS  FF2.5
2056:  GOTO   2060
205A:  BTFSC  FF2.2
205C:  GOTO   20AE
2060:  MOVFF  0E,00
2064:  MOVFF  0F,01
2068:  MOVFF  10,02
206C:  MOVFF  11,03
2070:  MOVFF  0C,FE9
2074:  MOVFF  07,FEA
2078:  BSF    07.7
207A:  MOVFF  08,FE1
207E:  MOVFF  09,FE2
2082:  MOVFF  0A,FD9
2086:  MOVFF  0B,FDA
208A:  MOVFF  12,FF3
208E:  MOVFF  13,FF4
2092:  MOVFF  14,FFA
2096:  MOVFF  15,FF5
209A:  MOVFF  16,FF6
209E:  MOVFF  17,FF7
20A2:  MOVF   04,W
20A4:  MOVFF  06,FE0
20A8:  MOVFF  05,FD8
20AC:  RETFIE 0
.................... /************************************************************************************************
.................... Company:
.................... Microside Technology Inc.
.................... 
.................... Product Revision  :  1
.................... Device            :  X-TRAINER
.................... Driver Version    :  1.0
.................... ************************************************************************************************/
.................... 
.................... /*
.................... ---------------------------------------------------------------------------
.................... Controlar la posicíon de un servo por medio del módulo PWM interno
.................... ---------------------------------------------------------------------------
.................... */
.................... 
.................... #include <18F4550.h>                            //Incluye el microcontrolador con el que se va a trabajar 
.................... //////////// Standard Header file for the PIC18F4550 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F4550
.................... 
.................... #list
.................... 
.................... #use delay(clock=48Mhz, crystal)                //Tipo de oscilador y frecuencia dependiendo del microcontrolador 
*
20C4:  MOVLW  01
20C6:  SUBWF  1E,F
20C8:  BNC   20E2
20CA:  CLRF   FEA
20CC:  MOVLW  1E
20CE:  MOVWF  FE9
20D0:  MOVF   FEF,W
20D2:  BZ    20E2
20D4:  MOVLW  02
20D6:  MOVWF  00
20D8:  DECFSZ 00,F
20DA:  BRA    20D8
20DC:  BRA    20DE
20DE:  DECFSZ FEF,F
20E0:  BRA    20D4
20E2:  RETURN 0
20E4:  CLRF   FEA
20E6:  MOVLW  1D
20E8:  MOVWF  FE9
20EA:  MOVF   FEF,W
20EC:  BZ    210A
20EE:  MOVLW  0F
20F0:  MOVWF  01
20F2:  CLRF   00
20F4:  DECFSZ 00,F
20F6:  BRA    20F4
20F8:  DECFSZ 01,F
20FA:  BRA    20F2
20FC:  MOVLW  8F
20FE:  MOVWF  00
2100:  DECFSZ 00,F
2102:  BRA    2100
2104:  NOP   
2106:  DECFSZ FEF,F
2108:  BRA    20EE
210A:  RETURN 0
.................... #build(reset=0x02000,interrupt=0x02008)         //Asignación de los vectores de reset e interrupción
.................... #org 0x0000,0x1FFF {}                           //Reserva espacio en la memoria para la versión con bootloader
.................... 
.................... int16 DUTY;                                     //variable para ajustar el valor del PWM
.................... int1 SUBE;
.................... int i;
.................... 
.................... #int_TIMER0
....................  
.................... void TIMER0_isr(){
.................... output_high(PIN_C2);                              //Salida Pin_C2
*
20AE:  BCF    F94.2
20B0:  BSF    F8B.2
.................... SUBE=1;
20B2:  BSF    1B.0
.................... set_timer0(5780);                                
20B4:  MOVLW  16
20B6:  MOVWF  FD7
20B8:  MOVLW  94
20BA:  MOVWF  FD6
20BC:  NOP   
.................... 
20BE:  BCF    FF2.2
20C0:  GOTO   2060
.................... }
.................... 
.................... void main()
*
210C:  CLRF   FF8
210E:  BCF    FD0.7
2110:  BSF    07.7
2112:  MOVF   FC1,W
2114:  ANDLW  C0
2116:  IORLW  0F
2118:  MOVWF  FC1
211A:  MOVLW  07
211C:  MOVWF  FB4
.................... {
....................         set_tris_c(0xFB);                                 // C2 salida
211E:  MOVLW  FB
2120:  MOVWF  F94
....................         setup_timer_0(T0_INTERNAL|T0_DIV_4);
2122:  MOVLW  81
2124:  MOVWF  FD5
....................         enable_interrupts(INT_TIMER0);
2126:  BSF    FF2.5
....................         enable_interrupts(GLOBAL);
2128:  MOVLW  C0
212A:  IORWF  FF2,F
....................         while(1)
....................               {
.................... 
....................                     for(i=0;i<255;i++)
212C:  CLRF   1C
212E:  INCFSZ 1C,W
2130:  BRA    2134
2132:  BRA    2154
....................                          {
....................                              if(SUBE==1)
2134:  BTFSS  1B.0
2136:  BRA    214C
....................                              {
....................                                 delay_us(500);     //0°
2138:  MOVLW  02
213A:  MOVWF  1D
213C:  MOVLW  FA
213E:  MOVWF  1E
2140:  RCALL  20C4
2142:  DECFSZ 1D,F
2144:  BRA    213C
....................                                  output_low( PIN_C2);
2146:  BCF    F94.2
2148:  BCF    F8B.2
....................                                  SUBE=0;
214A:  BCF    1B.0
....................                               }
....................                                 while(SUBE==0);
214C:  BTFSS  1B.0
214E:  BRA    214C
2150:  INCF   1C,F
2152:  BRA    212E
....................                             }
.................... 
....................                       for(i=0;i<255;i++)
2154:  CLRF   1C
2156:  INCFSZ 1C,W
2158:  BRA    215C
215A:  BRA    2182
....................                            {
....................                               if(SUBE==1)
215C:  BTFSS  1B.0
215E:  BRA    217A
....................                                {
....................                                   delay_us(1500);  //90°
2160:  MOVLW  01
2162:  MOVWF  1D
2164:  RCALL  20E4
2166:  MOVLW  02
2168:  MOVWF  1D
216A:  MOVLW  FA
216C:  MOVWF  1E
216E:  RCALL  20C4
2170:  DECFSZ 1D,F
2172:  BRA    216A
....................                                    output_low( PIN_C2);
2174:  BCF    F94.2
2176:  BCF    F8B.2
....................                                    SUBE=0;
2178:  BCF    1B.0
....................                                 }
....................                                 while(SUBE==0);
217A:  BTFSS  1B.0
217C:  BRA    217A
217E:  INCF   1C,F
2180:  BRA    2156
....................                           } 
.................... 
....................                         for(i=0;i<255;i++)
2182:  CLRF   1C
2184:  INCFSZ 1C,W
2186:  BRA    218A
2188:  BRA    21B0
....................                                {
....................                                   if(SUBE==1)
218A:  BTFSS  1B.0
218C:  BRA    21A8
....................                                   {
....................                                       delay_us(2500); //180°
218E:  MOVLW  02
2190:  MOVWF  1D
2192:  RCALL  20E4
2194:  MOVLW  02
2196:  MOVWF  1D
2198:  MOVLW  FA
219A:  MOVWF  1E
219C:  RCALL  20C4
219E:  DECFSZ 1D,F
21A0:  BRA    2198
....................                                       output_low( PIN_C2);
21A2:  BCF    F94.2
21A4:  BCF    F8B.2
....................                                        SUBE=0;
21A6:  BCF    1B.0
....................                                    }
....................                                   while(SUBE==0);
21A8:  BTFSS  1B.0
21AA:  BRA    21A8
21AC:  INCF   1C,F
21AE:  BRA    2184
....................                                     }
21B0:  BRA    212C
.................... 
....................                  }
.................... }
21B2:  SLEEP 

Configuration Fuses:
   Word  1: CC07   PLL12 CPUDIV1 NOUSBDIV HS FCMEN IESO
   Word  2: 1E3E   PUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
