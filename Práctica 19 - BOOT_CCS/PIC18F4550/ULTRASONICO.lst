CCS PCH C Compiler, Version 5.105Pd, 1               15-oct.-21 18:32
Compiler operating in Evaluation Mode
To obtain a fully enabled compiler visit www.ccsinfo.com/products

               Filename:   C:\Users\grego\OneDrive\Desktop\CSS_Practicas_OK\Práctica 19 - BOOT_CCS\Práctica-19-BOOT_CCS\Proyecto\PIC18F4550\ULTRASONICO.lst

               ROM used:   2024 bytes (6%)
                           Largest free fragment is 22548
               RAM used:   16 (1%) at main() level
                           32 (2%) worst case
               Stack used: 4 locations
               Stack size: 31

*
2000:  GOTO   26B2
.................... /************************************************************************************************
.................... Company:
.................... Microside Technology Inc.
.................... 
.................... Product Revision  :  1
.................... Device            :  X-TRAINER
.................... Driver Version    :  1.0
.................... ************************************************************************************************/
.................... 
.................... /**************************************************************************
.................... Esta práctica consiste en realizar una medicion de distancia a través de un 
.................... sensor ultrasonico, e imprimir la lectura en una pantalla LCD
.................... **************************************************************************/
.................... 
.................... #include  <18F4550.h>                          // Para PIC18F4550 cambiar por: #include <18F4550.h>
.................... //////////// Standard Header file for the PIC18F4550 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F4550
*
2008:  CLRF   FF7
200A:  ADDLW  18
200C:  MOVWF  FF6
200E:  MOVLW  20
2010:  ADDWFC FF7,F
2012:  TBLRD*+
2014:  MOVF   FF5,W
2016:  RETURN 0
2018:  DATA 28,0C
201A:  DATA 01,06
201C:  DATA 0C,44
201E:  DATA 69,73
2020:  DATA 74,61
2022:  DATA 6E,63
2024:  DATA 69,61
2026:  DATA 20,0A
2028:  DATA 25,4C
202A:  DATA 75,20
202C:  DATA 63,6D
202E:  DATA 00,00
*
21A4:  MOVLW  8E
21A6:  MOVWF  00
21A8:  MOVFF  0D,01
21AC:  MOVFF  0C,02
21B0:  CLRF   03
21B2:  MOVF   01,F
21B4:  BNZ   21C8
21B6:  MOVFF  02,01
21BA:  CLRF   02
21BC:  MOVLW  08
21BE:  SUBWF  00,F
21C0:  MOVF   01,F
21C2:  BNZ   21C8
21C4:  CLRF   00
21C6:  BRA    21D8
21C8:  BCF    FD8.0
21CA:  BTFSC  01.7
21CC:  BRA    21D6
21CE:  RLCF   02,F
21D0:  RLCF   01,F
21D2:  DECF   00,F
21D4:  BRA    21C8
21D6:  BCF    01.7
21D8:  RETURN 0
21DA:  MOVF   0C,W
21DC:  BTFSC  FD8.2
21DE:  BRA    22C2
21E0:  MOVWF  00
21E2:  MOVF   10,W
21E4:  BTFSC  FD8.2
21E6:  BRA    22C2
21E8:  ADDWF  00,F
21EA:  BNC   21F4
21EC:  MOVLW  81
21EE:  ADDWF  00,F
21F0:  BC    22C2
21F2:  BRA    21FC
21F4:  MOVLW  7F
21F6:  SUBWF  00,F
21F8:  BNC   22C2
21FA:  BZ    22C2
21FC:  MOVFF  0D,14
2200:  MOVF   11,W
2202:  XORWF  14,F
2204:  BSF    0D.7
2206:  BSF    11.7
2208:  MOVF   0F,W
220A:  MULWF  13
220C:  MOVFF  FF4,16
2210:  MOVF   0E,W
2212:  MULWF  12
2214:  MOVFF  FF4,03
2218:  MOVFF  FF3,15
221C:  MULWF  13
221E:  MOVF   FF3,W
2220:  ADDWF  16,F
2222:  MOVF   FF4,W
2224:  ADDWFC 15,F
2226:  MOVLW  00
2228:  ADDWFC 03,F
222A:  MOVF   0F,W
222C:  MULWF  12
222E:  MOVF   FF3,W
2230:  ADDWF  16,F
2232:  MOVF   FF4,W
2234:  ADDWFC 15,F
2236:  MOVLW  00
2238:  CLRF   02
223A:  ADDWFC 03,F
223C:  ADDWFC 02,F
223E:  MOVF   0D,W
2240:  MULWF  13
2242:  MOVF   FF3,W
2244:  ADDWF  15,F
2246:  MOVF   FF4,W
2248:  ADDWFC 03,F
224A:  MOVLW  00
224C:  ADDWFC 02,F
224E:  MOVF   0D,W
2250:  MULWF  12
2252:  MOVF   FF3,W
2254:  ADDWF  03,F
2256:  MOVF   FF4,W
2258:  ADDWFC 02,F
225A:  MOVLW  00
225C:  CLRF   01
225E:  ADDWFC 01,F
2260:  MOVF   0F,W
2262:  MULWF  11
2264:  MOVF   FF3,W
2266:  ADDWF  15,F
2268:  MOVF   FF4,W
226A:  ADDWFC 03,F
226C:  MOVLW  00
226E:  ADDWFC 02,F
2270:  ADDWFC 01,F
2272:  MOVF   0E,W
2274:  MULWF  11
2276:  MOVF   FF3,W
2278:  ADDWF  03,F
227A:  MOVF   FF4,W
227C:  ADDWFC 02,F
227E:  MOVLW  00
2280:  ADDWFC 01,F
2282:  MOVF   0D,W
2284:  MULWF  11
2286:  MOVF   FF3,W
2288:  ADDWF  02,F
228A:  MOVF   FF4,W
228C:  ADDWFC 01,F
228E:  INCF   00,F
2290:  BTFSC  01.7
2292:  BRA    229E
2294:  RLCF   15,F
2296:  RLCF   03,F
2298:  RLCF   02,F
229A:  RLCF   01,F
229C:  DECF   00,F
229E:  MOVLW  00
22A0:  BTFSS  15.7
22A2:  BRA    22B8
22A4:  INCF   03,F
22A6:  ADDWFC 02,F
22A8:  ADDWFC 01,F
22AA:  MOVF   01,W
22AC:  BNZ   22B8
22AE:  MOVF   02,W
22B0:  BNZ   22B8
22B2:  MOVF   03,W
22B4:  BNZ   22B8
22B6:  INCF   00,F
22B8:  BTFSC  14.7
22BA:  BSF    01.7
22BC:  BTFSS  14.7
22BE:  BCF    01.7
22C0:  BRA    22CA
22C2:  CLRF   00
22C4:  CLRF   01
22C6:  CLRF   02
22C8:  CLRF   03
22CA:  RETURN 0
22CC:  MOVLW  80
22CE:  BTFSC  FD8.1
22D0:  XORWF  15,F
22D2:  CLRF   1A
22D4:  CLRF   1B
22D6:  MOVFF  11,19
22DA:  MOVF   15,W
22DC:  XORWF  19,F
22DE:  MOVF   10,W
22E0:  BTFSC  FD8.2
22E2:  BRA    249C
22E4:  MOVWF  18
22E6:  MOVWF  00
22E8:  MOVF   14,W
22EA:  BTFSC  FD8.2
22EC:  BRA    24AE
22EE:  SUBWF  18,F
22F0:  BTFSC  FD8.2
22F2:  BRA    23F6
22F4:  BNC   2370
22F6:  MOVFF  15,1E
22FA:  BSF    1E.7
22FC:  MOVFF  16,1D
2300:  MOVFF  17,1C
2304:  CLRF   1B
2306:  BCF    FD8.0
2308:  RRCF   1E,F
230A:  RRCF   1D,F
230C:  RRCF   1C,F
230E:  RRCF   1B,F
2310:  DECFSZ 18,F
2312:  BRA    2304
2314:  BTFSS  19.7
2316:  BRA    231E
2318:  BSF    1A.0
231A:  BRA    24D6
231C:  BCF    1A.0
231E:  BCF    18.0
2320:  BSF    1A.4
2322:  CLRF   FEA
2324:  MOVLW  13
2326:  MOVWF  FE9
2328:  BRA    24FC
232A:  BCF    1A.4
232C:  BTFSC  19.7
232E:  BRA    2344
2330:  BTFSS  18.0
2332:  BRA    235A
2334:  RRCF   1E,F
2336:  RRCF   1D,F
2338:  RRCF   1C,F
233A:  RRCF   1B,F
233C:  INCF   00,F
233E:  BTFSC  FD8.2
2340:  BRA    24CC
2342:  BRA    235A
2344:  BTFSC  1E.7
2346:  BRA    2360
2348:  BCF    FD8.0
234A:  RLCF   1B,F
234C:  RLCF   1C,F
234E:  RLCF   1D,F
2350:  RLCF   1E,F
2352:  DECF   00,F
2354:  BTFSC  FD8.2
2356:  BRA    24CC
2358:  BRA    2344
235A:  BSF    1A.6
235C:  BRA    2434
235E:  BCF    1A.6
2360:  MOVFF  11,19
2364:  BTFSS  11.7
2366:  BRA    236C
2368:  BSF    1E.7
236A:  BRA    24BE
236C:  BCF    1E.7
236E:  BRA    24BE
2370:  MOVFF  14,18
2374:  MOVFF  14,00
2378:  MOVF   10,W
237A:  SUBWF  18,F
237C:  MOVFF  11,1E
2380:  BSF    1E.7
2382:  MOVFF  12,1D
2386:  MOVFF  13,1C
238A:  CLRF   1B
238C:  BCF    FD8.0
238E:  RRCF   1E,F
2390:  RRCF   1D,F
2392:  RRCF   1C,F
2394:  RRCF   1B,F
2396:  DECFSZ 18,F
2398:  BRA    238A
239A:  BTFSS  19.7
239C:  BRA    23A4
239E:  BSF    1A.1
23A0:  BRA    24D6
23A2:  BCF    1A.1
23A4:  BCF    18.0
23A6:  BSF    1A.5
23A8:  CLRF   FEA
23AA:  MOVLW  17
23AC:  MOVWF  FE9
23AE:  BRA    24FC
23B0:  BCF    1A.5
23B2:  BTFSC  19.7
23B4:  BRA    23CA
23B6:  BTFSS  18.0
23B8:  BRA    23E0
23BA:  RRCF   1E,F
23BC:  RRCF   1D,F
23BE:  RRCF   1C,F
23C0:  RRCF   1B,F
23C2:  INCF   00,F
23C4:  BTFSC  FD8.2
23C6:  BRA    24CC
23C8:  BRA    23E0
23CA:  BTFSC  1E.7
23CC:  BRA    23E6
23CE:  BCF    FD8.0
23D0:  RLCF   1B,F
23D2:  RLCF   1C,F
23D4:  RLCF   1D,F
23D6:  RLCF   1E,F
23D8:  DECF   00,F
23DA:  BTFSC  FD8.2
23DC:  BRA    24CC
23DE:  BRA    23CA
23E0:  BSF    1A.7
23E2:  BRA    2434
23E4:  BCF    1A.7
23E6:  MOVFF  15,19
23EA:  BTFSS  15.7
23EC:  BRA    23F2
23EE:  BSF    1E.7
23F0:  BRA    24BE
23F2:  BCF    1E.7
23F4:  BRA    24BE
23F6:  MOVFF  15,1E
23FA:  BSF    1E.7
23FC:  MOVFF  16,1D
2400:  MOVFF  17,1C
2404:  BTFSS  19.7
2406:  BRA    2410
2408:  BCF    1E.7
240A:  BSF    1A.2
240C:  BRA    24D6
240E:  BCF    1A.2
2410:  CLRF   1B
2412:  BCF    18.0
2414:  CLRF   FEA
2416:  MOVLW  13
2418:  MOVWF  FE9
241A:  BRA    24FC
241C:  BTFSC  19.7
241E:  BRA    2458
2420:  MOVFF  11,19
2424:  BTFSS  18.0
2426:  BRA    2434
2428:  RRCF   1E,F
242A:  RRCF   1D,F
242C:  RRCF   1C,F
242E:  RRCF   1B,F
2430:  INCF   00,F
2432:  BZ    24CC
2434:  BTFSS  1B.7
2436:  BRA    244E
2438:  INCF   1C,F
243A:  BNZ   244E
243C:  INCF   1D,F
243E:  BNZ   244E
2440:  INCF   1E,F
2442:  BNZ   244E
2444:  RRCF   1E,F
2446:  RRCF   1D,F
2448:  RRCF   1C,F
244A:  INCF   00,F
244C:  BZ    24CC
244E:  BTFSC  1A.6
2450:  BRA    235E
2452:  BTFSC  1A.7
2454:  BRA    23E4
2456:  BRA    2490
2458:  MOVLW  80
245A:  XORWF  1E,F
245C:  BTFSS  1E.7
245E:  BRA    2468
2460:  BRA    24D6
2462:  MOVFF  15,19
2466:  BRA    247C
2468:  MOVFF  11,19
246C:  MOVF   1E,F
246E:  BNZ   247C
2470:  MOVF   1D,F
2472:  BNZ   247C
2474:  MOVF   1C,F
2476:  BNZ   247C
2478:  CLRF   00
247A:  BRA    24BE
247C:  BTFSC  1E.7
247E:  BRA    2490
2480:  BCF    FD8.0
2482:  RLCF   1B,F
2484:  RLCF   1C,F
2486:  RLCF   1D,F
2488:  RLCF   1E,F
248A:  DECFSZ 00,F
248C:  BRA    247C
248E:  BRA    24CC
2490:  BTFSS  19.7
2492:  BRA    2498
2494:  BSF    1E.7
2496:  BRA    24BE
2498:  BCF    1E.7
249A:  BRA    24BE
249C:  MOVFF  14,00
24A0:  MOVFF  15,1E
24A4:  MOVFF  16,1D
24A8:  MOVFF  17,1C
24AC:  BRA    24BE
24AE:  MOVFF  10,00
24B2:  MOVFF  11,1E
24B6:  MOVFF  12,1D
24BA:  MOVFF  13,1C
24BE:  MOVFF  1E,01
24C2:  MOVFF  1D,02
24C6:  MOVFF  1C,03
24CA:  BRA    2534
24CC:  CLRF   00
24CE:  CLRF   01
24D0:  CLRF   02
24D2:  CLRF   03
24D4:  BRA    2534
24D6:  CLRF   1B
24D8:  COMF   1C,F
24DA:  COMF   1D,F
24DC:  COMF   1E,F
24DE:  COMF   1B,F
24E0:  INCF   1B,F
24E2:  BNZ   24EE
24E4:  INCF   1C,F
24E6:  BNZ   24EE
24E8:  INCF   1D,F
24EA:  BNZ   24EE
24EC:  INCF   1E,F
24EE:  BTFSC  1A.0
24F0:  BRA    231C
24F2:  BTFSC  1A.1
24F4:  BRA    23A2
24F6:  BTFSC  1A.2
24F8:  BRA    240E
24FA:  BRA    2462
24FC:  MOVF   FEF,W
24FE:  ADDWF  1C,F
2500:  BNC   250C
2502:  INCF   1D,F
2504:  BNZ   250C
2506:  INCF   1E,F
2508:  BTFSC  FD8.2
250A:  BSF    18.0
250C:  MOVF   FED,F
250E:  MOVF   FEF,W
2510:  ADDWF  1D,F
2512:  BNC   251A
2514:  INCF   1E,F
2516:  BTFSC  FD8.2
2518:  BSF    18.0
251A:  MOVF   FED,F
251C:  MOVF   FEF,W
251E:  BTFSC  FEF.7
2520:  BRA    2524
2522:  XORLW  80
2524:  ADDWF  1E,F
2526:  BTFSC  FD8.0
2528:  BSF    18.0
252A:  BTFSC  1A.4
252C:  BRA    232A
252E:  BTFSC  1A.5
2530:  BRA    23B0
2532:  BRA    241C
2534:  GOTO   279E (RETURN)
2538:  MOVLW  8E
253A:  MOVWF  00
253C:  MOVF   0C,W
253E:  SUBWF  00,F
2540:  MOVFF  0D,02
2544:  MOVFF  0E,01
2548:  BSF    02.7
254A:  MOVF   00,F
254C:  BZ    2560
254E:  BCF    FD8.0
2550:  MOVF   02,F
2552:  BNZ   2558
2554:  MOVF   01,F
2556:  BZ    2560
2558:  RRCF   02,F
255A:  RRCF   01,F
255C:  DECFSZ 00,F
255E:  BRA    254E
2560:  BTFSS  0D.7
2562:  BRA    256E
2564:  COMF   01,F
2566:  COMF   02,F
2568:  INCF   01,F
256A:  BTFSC  FD8.2
256C:  INCF   02,F
256E:  GOTO   27B0 (RETURN)
*
25D8:  TBLRD*+
25DA:  MOVFF  FF6,0D
25DE:  MOVFF  FF7,0E
25E2:  MOVFF  FF5,15
25E6:  RCALL  2596
25E8:  MOVFF  0D,FF6
25EC:  MOVFF  0E,FF7
25F0:  DECFSZ 0C,F
25F2:  BRA    25D8
25F4:  RETURN 0
25F6:  MOVFF  FEA,14
25FA:  MOVFF  FE9,13
25FE:  SWAPF  0D,W
2600:  IORLW  F0
2602:  MOVWF  0F
2604:  ADDWF  0F,F
2606:  ADDLW  E2
2608:  MOVWF  10
260A:  ADDLW  32
260C:  MOVWF  12
260E:  MOVF   0D,W
2610:  ANDLW  0F
2612:  ADDWF  10,F
2614:  ADDWF  10,F
2616:  ADDWF  12,F
2618:  ADDLW  E9
261A:  MOVWF  11
261C:  ADDWF  11,F
261E:  ADDWF  11,F
2620:  SWAPF  0C,W
2622:  ANDLW  0F
2624:  ADDWF  11,F
2626:  ADDWF  12,F
2628:  RLCF   11,F
262A:  RLCF   12,F
262C:  COMF   12,F
262E:  RLCF   12,F
2630:  MOVF   0C,W
2632:  ANDLW  0F
2634:  ADDWF  12,F
2636:  RLCF   0F,F
2638:  MOVLW  07
263A:  MOVWF  0E
263C:  MOVLW  0A
263E:  DECF   11,F
2640:  ADDWF  12,F
2642:  BNC   263E
2644:  DECF   10,F
2646:  ADDWF  11,F
2648:  BNC   2644
264A:  DECF   0F,F
264C:  ADDWF  10,F
264E:  BNC   264A
2650:  DECF   0E,F
2652:  ADDWF  0F,F
2654:  BNC   2650
2656:  CLRF   FEA
2658:  MOVLW  0E
265A:  MOVWF  FE9
265C:  MOVLW  07
265E:  ANDWF  13,W
2660:  BCF    13.6
2662:  ADDWF  FE9,F
2664:  MOVLW  00
2666:  ADDWFC FEA,F
2668:  MOVF   FE9,W
266A:  SUBLW  12
266C:  BNZ   2674
266E:  MOVF   FEA,F
2670:  BNZ   2674
2672:  BSF    13.6
2674:  MOVF   FEF,W
2676:  MOVWF  00
2678:  BNZ   268A
267A:  BTFSC  13.6
267C:  BRA    268A
267E:  BTFSC  13.4
2680:  BRA    26A8
2682:  BTFSC  13.3
2684:  BRA    268A
2686:  MOVLW  20
2688:  BRA    2690
268A:  BSF    13.3
268C:  BCF    13.4
268E:  MOVLW  30
2690:  ADDWF  00,F
2692:  MOVFF  FEA,0D
2696:  MOVFF  FE9,0C
269A:  MOVFF  00,15
269E:  RCALL  2596
26A0:  MOVFF  0D,FEA
26A4:  MOVFF  0C,FE9
26A8:  MOVF   FEE,W
26AA:  BTFSS  13.6
26AC:  BRA    2668
26AE:  GOTO   27DA (RETURN)
.................... 
.................... #list
.................... 
.................... #use delay(clock=48Mhz, crystal)                  // Tipo de oscilador y frecuencia dependiendo del microcontrolador 
*
2030:  CLRF   FEA
2032:  MOVLW  16
2034:  MOVWF  FE9
2036:  MOVF   FEF,W
2038:  BZ    2056
203A:  MOVLW  0F
203C:  MOVWF  01
203E:  CLRF   00
2040:  DECFSZ 00,F
2042:  BRA    2040
2044:  DECFSZ 01,F
2046:  BRA    203E
2048:  MOVLW  8F
204A:  MOVWF  00
204C:  DECFSZ 00,F
204E:  BRA    204C
2050:  NOP   
2052:  DECFSZ FEF,F
2054:  BRA    203A
2056:  RETURN 0
*
2184:  MOVLW  01
2186:  SUBWF  0D,F
2188:  BNC   21A2
218A:  CLRF   FEA
218C:  MOVLW  0D
218E:  MOVWF  FE9
2190:  MOVF   FEF,W
2192:  BZ    21A2
2194:  MOVLW  02
2196:  MOVWF  00
2198:  DECFSZ 00,F
219A:  BRA    2198
219C:  BRA    219E
219E:  DECFSZ FEF,F
21A0:  BRA    2194
21A2:  RETURN 0
.................... #build(reset=0x02000,interrupt=0x02008)      // Asigna los vectores de reset e interrupción para la versión con Bootloader
.................... #org 0x0000,0x1FFF {}                       // Reserva espacio en memoria para el Bootloader 
.................... 
.................... //CONFIGURACION DE PINES LCD
.................... #define LCD_RS PIN_B0      //CONTROL del LCD
.................... #define LCD_RW PIN_B1
.................... #define LCD_E  PIN_B2
.................... #define LCD_DB4 PIN_B3    //DATOS del LCD (4 lineas)
.................... #define LCD_DB5 PIN_B4
.................... #define LCD_DB6 PIN_B5
.................... #define LCD_DB7 PIN_B6
.................... #include "flex_lcd.h"     //LIBRERIA LCD
.................... 
.................... // flex_lcd.c
.................... 
.................... // These pins are for the Microchip PicDem2-Plus board,
.................... // which is what I used to test the driver.  Change these
.................... // pins to fit your own board.
.................... 
.................... //#define LCD_DB4   PIN_B4
.................... //#define LCD_DB5   PIN_B5
.................... //#define LCD_DB6   PIN_B6
.................... //#define LCD_DB7   PIN_B7
.................... //
.................... //#define LCD_RS    PIN_C0
.................... //#define LCD_RW    PIN_C1
.................... //#define LCD_E     PIN_C2
.................... 
.................... // If you only want a 6-pin interface to your LCD, then
.................... // connect the R/W pin on the LCD to ground, and comment
.................... // out the following line.
.................... 
.................... #define USE_LCD_RW   1
.................... 
.................... //========================================
.................... 
.................... #define lcd_type 2        // 0=5x7, 1=5x10, 2=2 lines
.................... #define lcd_line_two 0x40 // LCD RAM address for the 2nd line
.................... 
.................... 
.................... int8 const LCD_INIT_STRING[4] =
.................... {
....................  0x20 | (lcd_type << 2), // Func set: 4-bit, 2 lines, 5x8 dots
....................  0xc,                    // Display on
....................  1,                      // Clear display
....................  6                       // Increment cursor
....................  };
.................... 
.................... 
.................... //-------------------------------------
.................... void lcd_send_nibble(int8 nibble)
.................... {
.................... // Note:  !! converts an integer expression
.................... // to a boolean (1 or 0).
....................  output_bit(LCD_DB4, !!(nibble & 1));
*
2058:  BTFSC  1D.0
205A:  BRA    2060
205C:  BCF    F8A.3
205E:  BRA    2062
2060:  BSF    F8A.3
2062:  BCF    F93.3
....................  output_bit(LCD_DB5, !!(nibble & 2));
2064:  BTFSC  1D.1
2066:  BRA    206C
2068:  BCF    F8A.4
206A:  BRA    206E
206C:  BSF    F8A.4
206E:  BCF    F93.4
....................  output_bit(LCD_DB6, !!(nibble & 4));
2070:  BTFSC  1D.2
2072:  BRA    2078
2074:  BCF    F8A.5
2076:  BRA    207A
2078:  BSF    F8A.5
207A:  BCF    F93.5
....................  output_bit(LCD_DB7, !!(nibble & 8));
207C:  BTFSC  1D.3
207E:  BRA    2084
2080:  BCF    F8A.6
2082:  BRA    2086
2084:  BSF    F8A.6
2086:  BCF    F93.6
.................... 
....................  delay_cycles(1);
2088:  NOP   
....................  output_high(LCD_E);
208A:  BCF    F93.2
208C:  BSF    F8A.2
....................  delay_us(2);
208E:  MOVLW  07
2090:  MOVWF  00
2092:  DECFSZ 00,F
2094:  BRA    2092
2096:  BRA    2098
....................  output_low(LCD_E);
2098:  BCF    F93.2
209A:  BCF    F8A.2
209C:  RETURN 0
.................... }
.................... 
.................... //-----------------------------------
.................... // This sub-routine is only called by lcd_read_byte().
.................... // It's not a stand-alone routine.  For example, the
.................... // R/W signal is set high by lcd_read_byte() before
.................... // this routine is called.
.................... 
.................... #ifdef USE_LCD_RW
.................... int8 lcd_read_nibble(void)
.................... {
.................... int8 retval;
.................... // Create bit variables so that we can easily set
.................... // individual bits in the retval variable.
.................... #bit retval_0 = retval.0
.................... #bit retval_1 = retval.1
.................... #bit retval_2 = retval.2
.................... #bit retval_3 = retval.3
.................... 
.................... retval = 0;
209E:  CLRF   1E
.................... 
.................... output_high(LCD_E);
20A0:  BCF    F93.2
20A2:  BSF    F8A.2
.................... delay_cycles(1);
20A4:  NOP   
.................... 
.................... retval_0 = input(LCD_DB4);
20A6:  BSF    F93.3
20A8:  BCF    1E.0
20AA:  BTFSC  F81.3
20AC:  BSF    1E.0
.................... retval_1 = input(LCD_DB5);
20AE:  BSF    F93.4
20B0:  BCF    1E.1
20B2:  BTFSC  F81.4
20B4:  BSF    1E.1
.................... retval_2 = input(LCD_DB6);
20B6:  BSF    F93.5
20B8:  BCF    1E.2
20BA:  BTFSC  F81.5
20BC:  BSF    1E.2
.................... retval_3 = input(LCD_DB7);
20BE:  BSF    F93.6
20C0:  BCF    1E.3
20C2:  BTFSC  F81.6
20C4:  BSF    1E.3
.................... 
.................... output_low(LCD_E);
20C6:  BCF    F93.2
20C8:  BCF    F8A.2
.................... 
.................... return(retval);
20CA:  MOVFF  1E,01
20CE:  RETURN 0
.................... }
.................... #endif
.................... 
.................... //---------------------------------------
.................... // Read a byte from the LCD and return it.
.................... 
.................... #ifdef USE_LCD_RW
.................... int8 lcd_read_byte(void)
.................... {
.................... int8 low;
.................... int8 high;
.................... 
.................... output_high(LCD_RW);
20D0:  BCF    F93.1
20D2:  BSF    F8A.1
.................... delay_cycles(1);
20D4:  NOP   
.................... 
.................... high = lcd_read_nibble();
20D6:  RCALL  209E
20D8:  MOVFF  01,1D
.................... 
.................... low = lcd_read_nibble();
20DC:  RCALL  209E
20DE:  MOVFF  01,1C
.................... 
.................... return( (high<<4) | low);
20E2:  SWAPF  1D,W
20E4:  MOVWF  00
20E6:  MOVLW  F0
20E8:  ANDWF  00,F
20EA:  MOVF   00,W
20EC:  IORWF  1C,W
20EE:  MOVWF  01
20F0:  GOTO   20FA (RETURN)
.................... }
.................... #endif
.................... 
.................... //----------------------------------------
.................... // Send a byte to the LCD.
.................... void lcd_send_byte(int8 address, int8 n)
.................... {
.................... output_low(LCD_RS);
20F4:  BCF    F93.0
20F6:  BCF    F8A.0
.................... 
.................... #ifdef USE_LCD_RW
.................... while(bit_test(lcd_read_byte(),7)) ;
20F8:  BRA    20D0
20FA:  MOVFF  01,1C
20FE:  BTFSC  01.7
2100:  BRA    20F8
.................... #else
.................... delay_us(60);
.................... #endif
.................... 
.................... if(address)
2102:  MOVF   1A,F
2104:  BZ    210C
....................    output_high(LCD_RS);
2106:  BCF    F93.0
2108:  BSF    F8A.0
210A:  BRA    2110
.................... else
....................    output_low(LCD_RS);
210C:  BCF    F93.0
210E:  BCF    F8A.0
.................... 
....................  delay_cycles(1);
2110:  NOP   
.................... 
.................... #ifdef USE_LCD_RW
.................... output_low(LCD_RW);
2112:  BCF    F93.1
2114:  BCF    F8A.1
.................... delay_cycles(1);
2116:  NOP   
.................... #endif
.................... 
.................... output_low(LCD_E);
2118:  BCF    F93.2
211A:  BCF    F8A.2
.................... 
.................... lcd_send_nibble(n >> 4);
211C:  SWAPF  1B,W
211E:  MOVWF  1C
2120:  MOVLW  0F
2122:  ANDWF  1C,F
2124:  MOVFF  1C,1D
2128:  RCALL  2058
.................... lcd_send_nibble(n & 0xf);
212A:  MOVF   1B,W
212C:  ANDLW  0F
212E:  MOVWF  1C
2130:  MOVWF  1D
2132:  RCALL  2058
2134:  RETURN 0
.................... }
.................... 
.................... //----------------------------
.................... void lcd_init(void)
.................... {
.................... int8 i;
.................... 
.................... output_low(LCD_RS);
2136:  BCF    F93.0
2138:  BCF    F8A.0
.................... 
.................... #ifdef USE_LCD_RW
.................... output_low(LCD_RW);
213A:  BCF    F93.1
213C:  BCF    F8A.1
.................... #endif
.................... 
.................... output_low(LCD_E);
213E:  BCF    F93.2
2140:  BCF    F8A.2
.................... 
.................... delay_ms(15);
2142:  MOVLW  0F
2144:  MOVWF  16
2146:  RCALL  2030
.................... 
.................... for(i=0 ;i < 3; i++)
2148:  CLRF   0C
214A:  MOVF   0C,W
214C:  SUBLW  02
214E:  BNC   2160
....................    {
....................     lcd_send_nibble(0x03);
2150:  MOVLW  03
2152:  MOVWF  1D
2154:  RCALL  2058
....................     delay_ms(5);
2156:  MOVLW  05
2158:  MOVWF  16
215A:  RCALL  2030
215C:  INCF   0C,F
215E:  BRA    214A
....................    }
.................... 
.................... lcd_send_nibble(0x02);
2160:  MOVLW  02
2162:  MOVWF  1D
2164:  RCALL  2058
.................... 
.................... for(i=0; i < sizeof(LCD_INIT_STRING); i++)
2166:  CLRF   0C
2168:  MOVF   0C,W
216A:  SUBLW  03
216C:  BNC   2180
....................    {
....................     lcd_send_byte(0, LCD_INIT_STRING[i]);
216E:  CLRF   03
2170:  MOVF   0C,W
2172:  RCALL  2008
2174:  MOVWF  0D
2176:  CLRF   1A
2178:  MOVWF  1B
217A:  RCALL  20F4
.................... 
....................     // If the R/W signal is not used, then
....................     // the busy bit can't be polled.  One of
....................     // the init commands takes longer than
....................     // the hard-coded delay of 60 us, so in
....................     // that case, lets just do a 5 ms delay
....................     // after all four of them.
....................     #ifndef USE_LCD_RW
217C:  INCF   0C,F
217E:  BRA    2168
....................     delay_ms(5);
....................     #endif
....................    }
2180:  GOTO   26CC (RETURN)
.................... 
.................... }
.................... 
.................... //----------------------------
.................... 
.................... void lcd_gotoxy(int8 x, int8 y)
.................... {
.................... int8 address;
.................... 
.................... if(y != 1)
*
2572:  DECFSZ 17,W
2574:  BRA    2578
2576:  BRA    257E
....................    address = lcd_line_two;
2578:  MOVLW  40
257A:  MOVWF  18
257C:  BRA    2580
.................... else
....................    address=0;
257E:  CLRF   18
.................... 
.................... address += x-1;
2580:  MOVLW  01
2582:  SUBWF  16,W
2584:  ADDWF  18,F
.................... lcd_send_byte(0, 0x80 | address);
2586:  MOVF   18,W
2588:  IORLW  80
258A:  MOVWF  19
258C:  CLRF   1A
258E:  MOVWF  1B
2590:  RCALL  20F4
2592:  GOTO   25D6 (RETURN)
.................... }
.................... 
.................... //-----------------------------
.................... void lcd_putc(char c)
.................... {
....................  switch(c)
2596:  MOVF   15,W
2598:  XORLW  0C
259A:  BZ    25A6
259C:  XORLW  06
259E:  BZ    25B6
25A0:  XORLW  02
25A2:  BZ    25C2
25A4:  BRA    25CC
....................    {
....................     case '\f':
....................       lcd_send_byte(0,1);
25A6:  CLRF   1A
25A8:  MOVLW  01
25AA:  MOVWF  1B
25AC:  RCALL  20F4
....................       delay_ms(2);
25AE:  MOVLW  02
25B0:  MOVWF  16
25B2:  RCALL  2030
....................       break;
25B4:  BRA    25D6
.................... 
....................     case '\n':
....................        lcd_gotoxy(1,2);
25B6:  MOVLW  01
25B8:  MOVWF  16
25BA:  MOVLW  02
25BC:  MOVWF  17
25BE:  BRA    2572
....................        break;
25C0:  BRA    25D6
.................... 
....................     case '\b':
....................        lcd_send_byte(0,0x10);
25C2:  CLRF   1A
25C4:  MOVLW  10
25C6:  MOVWF  1B
25C8:  RCALL  20F4
....................        break;
25CA:  BRA    25D6
.................... 
....................     default:
....................        lcd_send_byte(1,c);
25CC:  MOVLW  01
25CE:  MOVWF  1A
25D0:  MOVFF  15,1B
25D4:  RCALL  20F4
....................        break;
....................    }
25D6:  RETURN 0
.................... }
.................... 
.................... //------------------------------
.................... #ifdef USE_LCD_RW
.................... char lcd_getc(int8 x, int8 y)
.................... {
.................... char value;
.................... 
.................... lcd_gotoxy(x,y);
.................... 
.................... // Wait until busy flag is low.
.................... while(bit_test(lcd_read_byte(),7));
.................... 
.................... output_high(LCD_RS);
.................... value = lcd_read_byte();
.................... output_low(lcd_RS);
.................... 
.................... return(value);
.................... }
.................... #endif
.................... 
.................... void lcd_setcursor_vb(short visible, short blink) { 
....................   lcd_send_byte(0, 0xC|(visible<<1)|blink); 
.................... } 
.................... 
.................... 
.................... #define trig pin_C1     // Conectar al entrenador el pin "TRIGGER" del sensor ultrasónico
.................... #define echo pin_C0     // Conectar al entrenador el pin "ECHO" del sensor ultrasónico
.................... 
.................... int16 distancia, vtimer1;  // Variables para calculo de distancia y valor de tiempo de TIMER1
.................... 
.................... float tiempo;    //variable para calcular tiempo en segundos
.................... float const usxtick = 0.6;  //variable con valor por cada incremento en el TIMER1
.................... 
.................... void main()
*
26B2:  CLRF   FF8
26B4:  BCF    FD0.7
26B6:  MOVF   FC1,W
26B8:  ANDLW  C0
26BA:  IORLW  0F
26BC:  MOVWF  FC1
26BE:  MOVLW  07
26C0:  MOVWF  FB4
.................... {
....................    output_low (echo);
26C2:  BCF    F94.0
26C4:  BCF    F8B.0
....................    setup_timer_1 (T1_INTERNAL|T1_DIV_BY_8); // Se configura TIMER1 para medir tiempo
26C6:  MOVLW  B5
26C8:  MOVWF  FCD
....................    lcd_init ();  //Inicialización del lcd.
26CA:  BRA    2136
....................    
....................    while (1)
....................    {
....................       output_high (trig); // Envía pulso alto al pin TRIGGER del sensor
26CC:  BCF    F94.1
26CE:  BSF    F8B.1
....................       delay_us (100);  // Mantiene pulso 100uS.
26D0:  MOVLW  64
26D2:  MOVWF  0D
26D4:  RCALL  2184
....................       output_low (trig); // Desactiva pulso
26D6:  BCF    F94.1
26D8:  BCF    F8B.1
....................       delay_us (350);
26DA:  MOVLW  02
26DC:  MOVWF  0C
26DE:  MOVLW  AF
26E0:  MOVWF  0D
26E2:  RCALL  2184
26E4:  DECFSZ 0C,F
26E6:  BRA    26DE
....................       while ( ! input (echo)){} // Espera por estado alto del pin ECHO del sensor ultrasónico
26E8:  BSF    F94.0
26EA:  BTFSS  F82.0
26EC:  BRA    26E8
....................       set_timer1 (0); // Ajusta el Timer1 a 0
26EE:  CLRF   FCF
26F0:  CLRF   FCE
26F2:  NOP   
....................       while (input (echo)){} // Espera por estado bajo del pin ECHO del sensor ultrasónico
26F4:  BSF    F94.0
26F6:  BTFSC  F82.0
26F8:  BRA    26F4
....................       vtimer1 = get_timer1 (); // Obtiene el tiempo que se mantuvo en alto el pulso del pin TRIGGER leyendo el valor de Timer1
26FA:  MOVF   FCE,W
26FC:  MOVWF  06
26FE:  MOVFF  FCF,07
....................       tiempo = vtimer1 * usxtick; //Calcula tiempo en Segs
2702:  MOVFF  07,0D
2706:  MOVFF  06,0C
270A:  RCALL  21A4
270C:  MOVFF  03,0F
2710:  MOVFF  02,0E
2714:  MOVFF  01,0D
2718:  MOVFF  00,0C
271C:  MOVLW  9A
271E:  MOVWF  13
2720:  MOVLW  99
2722:  MOVWF  12
2724:  MOVLW  19
2726:  MOVWF  11
2728:  MOVLW  7E
272A:  MOVWF  10
272C:  RCALL  21DA
272E:  MOVFF  03,0B
2732:  MOVFF  02,0A
2736:  MOVFF  01,09
273A:  MOVFF  00,08
....................       distancia = vtimer1 * 0.012 + 1.093; // Calcula la distancia en cm
273E:  MOVFF  07,0D
2742:  MOVFF  06,0C
2746:  RCALL  21A4
2748:  MOVFF  03,0F
274C:  MOVFF  02,0E
2750:  MOVFF  01,0D
2754:  MOVFF  00,0C
2758:  MOVLW  A6
275A:  MOVWF  13
275C:  MOVLW  9B
275E:  MOVWF  12
2760:  MOVLW  44
2762:  MOVWF  11
2764:  MOVLW  78
2766:  MOVWF  10
2768:  RCALL  21DA
276A:  MOVFF  03,0F
276E:  MOVFF  02,0E
2772:  MOVFF  01,0D
2776:  MOVFF  00,0C
277A:  BCF    FD8.1
277C:  MOVFF  03,13
2780:  MOVFF  02,12
2784:  MOVFF  01,11
2788:  MOVFF  00,10
278C:  MOVLW  6D
278E:  MOVWF  17
2790:  MOVLW  E7
2792:  MOVWF  16
2794:  MOVLW  0B
2796:  MOVWF  15
2798:  MOVLW  7F
279A:  MOVWF  14
279C:  BRA    22CC
279E:  MOVFF  03,0F
27A2:  MOVFF  02,0E
27A6:  MOVFF  01,0D
27AA:  MOVFF  00,0C
27AE:  BRA    2538
27B0:  MOVFF  02,05
27B4:  MOVFF  01,04
....................       
....................                   
....................       delay_ms(200);            
27B8:  MOVLW  C8
27BA:  MOVWF  16
27BC:  RCALL  2030
....................       printf(lcd_putc,"\fDistancia \n%Lu cm",distancia);      //Envia valor de distancia hacia un LCD conectado al PIC   
27BE:  MOVLW  1C
27C0:  MOVWF  FF6
27C2:  MOVLW  20
27C4:  MOVWF  FF7
27C6:  MOVLW  0C
27C8:  MOVWF  0C
27CA:  RCALL  25D8
27CC:  MOVLW  10
27CE:  MOVWF  FE9
27D0:  MOVFF  05,0D
27D4:  MOVFF  04,0C
27D8:  BRA    25F6
27DA:  MOVLW  2B
27DC:  MOVWF  FF6
27DE:  MOVLW  20
27E0:  MOVWF  FF7
27E2:  MOVLW  03
27E4:  MOVWF  0C
27E6:  RCALL  25D8
27E8:  BRA    26CC
....................              
....................    }
.................... }
.................... 
27EA:  SLEEP 

Configuration Fuses:
   Word  1: CC07   PLL12 CPUDIV1 NOUSBDIV HS FCMEN IESO
   Word  2: 1E3E   PUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
